name: "Program Upgrade"
description: "Upgrades or deploys a Solana program"
inputs:
  program-id:
    description: "Program ID to upgrade"
    required: true
  program:
    description: "Program name"
    required: true
  buffer:
    description: "Buffer address"
    required: true
  rpc-url:
    description: "Solana RPC URL"
    required: true
  keypair:
    description: "Deployer keypair"
    required: true
  program-keypair:
    description: "Program address keypair for initial deployment"
    required: false

runs:
  using: "composite"
  steps:
    - name: Write keypairs and optionally verify program-id keypair
      shell: bash
      run: |
        echo "$DEPLOY_KEYPAIR" > ./deploy-keypair.json && chmod 600 ./deploy-keypair.json

        if [ -z "$PROGRAM_KEYPAIR" ]; then
          echo "‚ÑπÔ∏è No program-keypair provided ‚Äî skipping program-id verification."
        else
          echo "$PROGRAM_KEYPAIR" > ./program-keypair.json && chmod 600 ./program-keypair.json

          echo "üîç Verifying program-keypair matches inputs.program-id..."
          PROGRAM_PUBKEY=$(solana-keygen pubkey ./program-keypair.json)

          echo "Expected: '${{ inputs.program-id }}'"
          echo "Actual:   '$PROGRAM_PUBKEY'"

          if [ "$PROGRAM_PUBKEY" != "${{ inputs.program-id }}" ]; then
            echo "‚ùå Error: 'program-id' does not match public key of 'program-keypair'"
            exit 1
          fi

          echo "‚úÖ Verified: program-id matches program-keypair."
        fi
      env:
        DEPLOY_KEYPAIR: ${{ inputs.keypair }}
        PROGRAM_KEYPAIR: ${{ inputs.program-keypair }}

    - name: Check if program exists
      id: check-program
      shell: bash
      run: |
        if solana program show ${{ inputs.program-id }} --url ${{ inputs.rpc-url }} 2>&1 | grep -q "Data Length:"; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          
          if [ -z "${{ inputs.program-keypair }}" ]; then
            echo "‚ùå Error: program-keypair input is required for initial deployment (program does not exist yet)."
            exit 1
          fi
        fi

    - name: Deploy new program
      if: steps.check-program.outputs.exists == 'false'
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
          solana program deploy \
            --url ${{ inputs.rpc-url }} \
            --keypair ./deploy-keypair.json \
            --program-id ./program-keypair.json \
            --max-sign-attempts 50 \
            --with-compute-unit-price 100000 \
            --use-rpc \
            ./target/deploy/${{ inputs.program }}.so

    - name: Upgrade existing program
      if: steps.check-program.outputs.exists == 'true'
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        command: |
          echo "Debug: Buffer value is '${{ inputs.buffer }}'"
          if [ -z "${{ inputs.buffer }}" ]; then
            echo "Error: No buffer provided"
            exit 1
          fi

          # Get current and new program sizes
          CURRENT_SIZE=$(solana program show "${{ inputs.program-id }}" -u "${{ inputs.rpc-url }}" | grep "Data Length:" | cut -d ":" -f2 | cut -d " " -f2)
          NEW_SIZE=$(wc -c < "./target/deploy/${{ inputs.program }}.so")
          echo "Current program size: $CURRENT_SIZE bytes"
          echo "New program size: $NEW_SIZE bytes"

          # Extend program if needed
          if [ $NEW_SIZE -gt $CURRENT_SIZE ]; then
            echo "Program needs to be extended"
            solana program extend "${{ inputs.program-id }}" $((NEW_SIZE - CURRENT_SIZE)) -u "${{ inputs.rpc-url }}" -k ./deploy-keypair.json 
            echo "Program extended successfully"
          fi

          # Upgrade program
          solana program upgrade "${{ inputs.buffer }}" "${{ inputs.program-id }}" -k ./deploy-keypair.json -u "${{ inputs.rpc-url }}"

      env:
        BUFFER: ${{ inputs.buffer }}
        PROGRAM_ID: ${{ inputs.program-id }}
        PROGRAM: ${{ inputs.program }}
        RPC_URL: ${{ inputs.rpc-url }}

    - name: Cleanup
      if: always()
      shell: bash
      run: |
        rm -f ./deploy-keypair.json
        rm -f ./program-keypair.json
